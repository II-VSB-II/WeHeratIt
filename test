#! /bin/bash

## Note: This utility requires nmap, which you can get through the MacPorts package manager
## Note: This utility requires nc on the bootstrap node
## Note: This utility requires jq on the bootstrap node, which you can get from yum after enabling the epel-release


# setting up some global variables to make changes easier
aquaserver_name=hec-aqua001
aquaserver_internal_ip=10.0.0.140
aquaserver_external_ip=216.84.238.186

bootstrap_name=bootstrap
bootstrap_internal_ip=10.0.0.137
bootstrap_external_ip=216.84.237.132

private_key_name=heccp_demo2.pem


SCRIPT=$(stat -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")

  echo Establishing the docker credentials for pulling the Aqua images...
  if [ -z "${DOCKERUSERNAME}" ]
    then
      echo Please enter your docker hub username for access to the Aqua container images:
        IFS= read -p "Docker Hub User Name:" DOCKERUSERNAME
        echo
  fi
  echo Please enter the docker hub password for $DOCKERUSERNAME:
    IFS= read -s -p Password: DOCKERPWD
    echo

function countdown() {
  IFS=:
  set -- $*
  secs=$(( ${1#0} * 3600 + ${2#0} * 60 + ${3#0} ))
  while [ $secs -gt 0 ]
  do
    sleep 1 &
    printf "\r%02d:%02d:%02d" $((secs/3600)) $(( (secs/60)%60)) $((secs%60))
    secs=$(( $secs - 1 ))
    wait
  done
  echo
}

function rebuild {
  echo Checking Python3.6 Installation...
  python3.6 --version
  if [ $? -ne 0 ] ; then 
    cd $SCRIPTPATH
    yum install -y zlib-dev openssl-devel sqlite-devel bzip2-devel xz-libs gcc -y
    wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz
    xz -d Python-3.6.0.tar.xz
    tar -xvf Python-3.6.0.tar
    cd Python-3.6.0
    ./configure --prefix=/usr/local 
    make
    make altinstall
    export PATH="/usr/local/bin:$PATH"
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python3.6 get-pip.py
    rm -f get-pip.py
    rm -rf Python-3.6.0
    rm -f Python-3.6.0.tar
  else
    echo     python3.6 is already installed
  fi
  echo Setting up python openstack client...
  cd $SCRIPTPATH
  ls .env
  if [ $? -ne 0 ] ; then
      python3.6 -m venv .env
  else
     echo Virtual enviornment is present
  fi
  source $SCRIPTPATH/.env/bin/activate
  python3.6 -m pip install python-openstackclient
  source $SCRIPTPATH/ManagedContainerDemos-openrc.sh
  echo Issuing commands to rebuild the cluster nodes, this takes several seconds...
  for ((n=1; n<=13; n++)) do
    openstack server rebuild private-$n --image mes-nodeTemplate74-dockerCE &
  done
  openstack server rebuild master --image mes-nodeTemplate74-dockerCE &
  openstack server rebuild public --image mes-nodeTemplate74-dockerCE &
  openstack server rebuild $aquaserver_name --image mes-nodeTemplate74-dockerCE &
  wait
  echo Checking the status of the server rebuilds...
  while openstack server list -c Status | grep -oi "rebuild" > /dev/null;
    do
      echo "    Server rebuilds still pending, retesting in ..."
      countdown 00:00:05
    done
  deactivate

  while nmap $aquaserver_external_ip -Pn -p 22 | grep -iE 'closed|filtered' > /dev/null;
    do 
      echo "    The Aqua server is not yet responding, testing again in ..."
      countdown 00:00:05
  done
  countdown 00:00:60
}

####  This whole function may need to move the remote bootstrap machine as a script to remotely execute
# function setpassword {
#   echo setting up the centos password on all servers, including the bootstrap
#   for ((n=1; n<=13; n++)) do
#     #### write the centos:<password> the changepwd.txt file on the remote machine and run chpasswd -c SHA512 < changepwd.txt
#       #### may need to run as sudo
#   done
#   master #### write the centos:<password> the changepwd.txt file on the remote machine and run chpasswd -c SHA512 < changepwd.txt
#   public #### write the centos:<password> the changepwd.txt file on the remote machine and run chpasswd -c SHA512 < changepwd.txt
#   hec-aqua001 #### write the centos:<password> the changepwd.txt file on the remote machine and run chpasswd -c SHA512 < changepwd.txt
#   bootstratp  #### write the centos:<password> the changepwd.txt file on the remote machine and run chpasswd -c SHA512 < changepwd.txt
# }

function fixdns {
  echo clearing the known hosts file on the bootstrap server to avoid spamming warnings
  ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$bootstrap_external_ip "
  sudo rm -f \$HOME/.ssh/known_hosts
  "

  echo setting dns search suffix on cluster nodes
  ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$bootstrap_external_ip "
  sudo bash \$HOME/set-cluster-dnssuffix.sh
  "

  echo setting dns search suffix on cluster nodes
  ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$bootstrap_external_ip "
  sudo bash \$HOME/set-cluster-hostnames.sh
  "
}

function cleanupbootstrap {
  echo Cleaning up the docker containers on the bootstrap machine, Aqua conflicts with the DC/OS install...
  CONTAINERS=$(ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$bootstrap_external_ip "sudo docker ps -aq" | sed -E -e 's/[[:blank:]]+/\n/g')
  if [ ! -z "${CONTAINERS}" ]; then
    for CONTAINER in $CONTAINERS; do
      ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$bootstrap_external_ip "sudo docker stop $CONTAINER"
      ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$bootstrap_external_ip "sudo docker stop $CONTAINER"
      ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$bootstrap_external_ip "sudo docker rm $CONTAINER"
    done
  else
    echo "    Nothing to cleanup"
  fi
  ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$bootstrap_external_ip "sudo docker system prune --force"
}

function dcosinstall {
  echo Installing DC/OS ...
  ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$bootstrap_external_ip "
  rm -rf \$HOME/genconf/serve/;
  rm -f \$HOME/genconf/cluster_packages.json;
  rm -f \$HOME/*.tar;
  sudo bash \$HOME/dcos_generate_config.ee.sh --genconf;
  sudo bash \$HOME/dcos_generate_config.ee.sh --install-prereqs;
  # sudo bash \$HOME/dcos_generate_config.ee.sh --preflight;
  sudo bash \$HOME/dcos_generate_config.ee.sh --deploy;
  # sudo bash \$HOME/dcos_generate_config.ee.sh --postflight;
  # dcos auth login --username=root --password=hds123;
  # dcos package install --options=\$HOME/connectedcar/kibana_config.json --yes beta-kibana --package-version=1.0.13-5.4.1-beta;
  "
}

function aquainstall {
  ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$aquaserver_external_ip "
    echo Logging out of docker, if logged in, and logging in with provided credentials
    sudo docker logout
    sudo docker login --username $DOCKERUSERNAME --password $DOCKERPWD
    echo Starting pull of docker images...
    sudo docker pull aquasec/server:3.2.0 &
    sudo docker pull aquasec/gateway:3.2.0 &
    sudo docker pull aquasec/database:3.2.0 &
    sudo docker pull aquasec/scanner-cli:3.2.0 &
    sudo docker pull aquasec/agent:3.2.0 &
    wait
    "
  ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$aquaserver_external_ip <<EOF
    echo Launching Aqua containers...
    sudo docker run -d --restart=unless-stopped -p 5432:5432 --name aqua-db -e POSTGRES_PASSWORD=Hitvan123! aquasec/database:3.2.0 &
    sudo docker run -d --restart=unless-stopped -p 8080:8080 -p 443:8443 --name aqua-web --user=root -e ADMIN_PASSWORD=Hitvan123! -e SCALOCK_DBUSER=postgres -e SCALOCK_DBPASSWORD=Hitvan123! -e SCALOCK_DBNAME=scalock -e SCALOCK_DBHOST=$aquaserver_name -e SCALOCK_AUDIT_DBUSER=postgres -e SCALOCK_AUDIT_DBPASSWORD=Hitvan123! -e SCALOCK_AUDIT_DBNAME=slk_audit -e SCALOCK_AUDIT_DBHOST=$aquaserver_name -e LICENSE_TOKEN=7qyw0dKyxEbLXx2dGQXUMD74e1FjnsGEM5Gork9hWwCmWVhqzzArXH_iCYzAXSj75VT6Y0vyrBJ3Yr3k_g87RrnWy8ZnGTxYazOefAqTBeHAX2qwiIjzAxK1eWKZoj07OeaZdH-3XS6SFPefjM5y2UKp4QAkyM7alum4hjKxWt4E5YqU5t2_TvfVJWaQ0qSJ1QqB5OnPRU3i8Z3H99e-O6ViT9MaybLDh6tvha45PRUtoS49FwpxIA0nDFbtwncHV7B0PG-8oag1WWXW31Ng7_gQG8aCHffnYUTO-BG8ss9yspQUwda3tvfiPRjyVEIzBH1hY5ZaZe6-mrZhyqoMXsl7rbvlCOW1obbtavThv-WSZKCT-ctYiF6S1hcULAklKRhrXvbr9JlDIgGJIOTM81rO-r1ZCkuiArhxSBr7NCvN0gYQBHwJMiHUmw9oys_mqEFDm-hxBwhia-Xk9A== -v /var/run/docker.sock:/var/run/docker.sock aquasec/server:3.2.0 &
    sudo docker run -d --restart=unless-stopped -p 3622:3622 --name aqua-gateway -e SCALOCK_GATEWAY_NAME=$aquaserver_name -e SCALOCK_DBUSER=postgres -e SCALOCK_DBPASSWORD=Hitvan123! -e SCALOCK_DBNAME=scalock -e SCALOCK_DBHOST=$aquaserver_name -e SCALOCK_AUDIT_DBUSER=postgres -e SCALOCK_AUDIT_DBPASSWORD=Hitvan123! -e SCALOCK_AUDIT_DBNAME=slk_audit -e SCALOCK_AUDIT_DBHOST=$aquaserver_name aquasec/gateway:3.2.0 &
    wait
EOF

  echo Waiting up to two minutes for the aqau server components to initialize
  COUNTER=0
  STATUS=$(curl -s -o /dev/null -w '%{http_code}' http\://$aquaserver_external_ip\:8080/api)
  echo The aqua-server API returned a $STATUS response
  while [ $STATUS -ne "200" ]
    do
        if [ $COUNTER -gt 24 ]
            then
                echo Time limit of 120 seconds exceeded, exiting script.  Check to see if the aqua components properly installed and initialized
                unset STATUS
                unset COUNTER
                exit
            else
                COUNTER=$((COUNTER+1))
                echo waiting 5 seconds to test again
                sleep 5s
                STATUS=$(curl -s -o /dev/null -w '%{http_code}' http\://${aquaserver_external_ip}\:8080/api)
                echo The aqua-server API returned the following response: $STATUS
        fi
    done
  unset STATUS
  unset COUNTER

  ssh -q -i $SCRIPTPATH/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$aquaserver_external_ip <<EOF
    echo Created the scanner user and launching the scanner container...
    curl -u administrator:Hitvan123! -X POST -H "Content-Type:application/json" --data '{"id":"scanner", "name":"scanner", "password":"Hitvan123!", "role":"scanner"}' http://$aquaserver_name:8080/api/v1/users
    sudo docker run -d --restart=unless-stopped -v /var/run/docker.sock:/var/run/docker.sock aquasec/scanner-cli:3.2.0 daemon -H http://$aquaserver_name:8080 -U scanner -P Hitvan123!
EOF
}

function createagents {
  ssh -q -i $private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$aquaserver_external_ip "
    sudo docker save --output agent-3.2.0.tar aquasec/agent:3.2.0
    sudo chmod 777 ./agent-3.2.0.tar
  "
  ssh -q -i $private_key_name centos@$bootstrap_external_ip "
    scp -i \$HOME/$private_key_name -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@$aquaserver_internal_ip:./agent-3.2.0.tar ./
  "
  ssh -q -i $private_key_name centos@$bootstrap_external_ip "
    \$HOME/install_aqua_agents.sh
  "
}

function addpolicyonaqua {
   ssh -q -i heccp_demo2.pem -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" centos@216.84.238.186 <<EOF
   
   echo Adding Policies to AQUA..
   ## Download OVAL 5.10 Scripts

   curl https://oval.mitre.org/rep-data/5.10/org.mitre.oval/c/oval.xml -o oval-compliance.xml
   curl https://oval.mitre.org/rep-data/5.10/org.mitre.oval/i/oval.xml -o oval-inventory.xml
   curl https://oval.mitre.org/rep-data/5.10/org.mitre.oval/m/oval.xml -o oval-miscellaneous.xml
   curl https://oval.mitre.org/rep-data/5.10/org.mitre.oval/p/oval.xml -o oval-patch.xml
   curl https://oval.mitre.org/rep-data/5.10/org.mitre.oval/v/oval.xml -o oval-vulnerability.xml

   ## Add New OVAL Compliance Check Scripts

   curl -u administrator:Hitvan123! -X POST -H "Content-Type:application/json" http://hec-aqua001:8080/api/v2/image_assurance/user_scripts -d '[{"path":"oval-compliance.xml","name":"oval-compliance","description":"","engine":"oval"}]'

   curl -u administrator:Hitvan123! -X POST -H "Content-Type:application/json" http://hec-aqua001:8080/api/v2/image_assurance/user_scripts -d '[{"path":"oval-inventory.xml","name":"oval-inventory","description":"","engine":"oval"}]'

   curl -u administrator:Hitvan123! -X POST -H "Content-Type:application/json" http://hec-aqua001:8080/api/v2/image_assurance/user_scripts -d '[{"path":"oval-miscellaneous.xml","name":"oval-miscellaneous","description":"","engine":"oval"}]'

   curl -u administrator:Hitvan123! -X POST -H "Content-Type:application/json" http://hec-aqua001:8080/api/v2/image_assurance/user_scripts -d '[{"path":"oval-patch.xml","name":"oval-patch","description":"","engine":"oval"}]'

   curl -u administrator:Hitvan123! -X POST -H "Content-Type:application/json" http://hec-aqua001:8080/api/v2/image_assurance/user_scripts -d '[{"path":"oval-vulnerability.xml","name":"oval-vulnerability","description":"","engine":"oval"}]'


   ## Create New Default Image Assurance Policy

   curl -u administrator:Hitvan123! -X POST -H "Content-Type:application/json" http://hec-aqua001:8080/api/v2/image_assurance -d '{"id":4,"name":"Baseline_Image_Assurance_Audit","description":"This is audit only policy to apply to all masters, agents and management components.","author":"administrator","lastupdate":"2018-07-31T08:50:52.77704Z","cvss_severity_enabled":true,"cvss_severity":"high","cvss_severity_exclude_no_fix":true,"maximum_score_enabled":true,"maximum_score":7,"maximum_score_exclude_no_fix":true,"custom_checks_enabled":true,"scap_enabled":true,"cves_black_list_enabled":false,"packages_black_list_enabled":false,"packages_white_list_enabled":true,"only_none_root_users":true,"trusted_base_images_enabled":false,"scan_sensitive_data":true,"audit_on_failure":true,"fail_cicd":true,"block_failed":false,"disallow_malware":false,"blacklisted_licenses_enabled":true,"blacklisted_licenses":["GPL-2.0","GPL-3.0","LGPL-2.1","LGPL-3.0","AGPL-3.0","MPL-2.0","EPL-1.0","MS-RL","OSL-3.0","ODbL","Peer Production License","PPL","RPL-1.5","NGPL","RPSL-1.0","OCLC-2.0"],"custom_checks":[{"script_id":"1","name":"check_netcat_installed","path":"check_netcat_installed.sh","last_modified":0,"description":"","engine":"sh","snippet":"#!/bin/sh\nif [ `find / -name nc | wc -l`  == \"0\" ]; then echo \"Netcat is not installed on this image\"; exit 0 ; else echo \"Netcat is installed on this image\"; exit 1; fi\n"},{"script_id":"2","name":"check_sshd_installed","path":"check_sshd_installed.sh","last_modified":0,"description":"","engine":"sh","snippet":"#!/bin/sh\nif [ `find / -name sshd | wc -l`  == \"0\" ]; then echo \"SSHD daemon was not found in this image\"; exit 0 ; else echo \"SSHD was found in this image\"; exit 1; fi\n###\n"},{"script_id":"3","name":"find_suid_programs","path":"find_suid_programs.sh","last_modified":0,"description":"","engine":"sh","snippet":"#!/bin/sh\nif [ ` find / -perm -4000 -print | wc -l`  == \"0\" ]; then echo \"No files with SUID permissions were found in this image\"; exit 0 ; else echo \"Files with SUID permissions were found in this image\"; exit 1; fi\n"},{"script_id":"4","name":"find_world_writable_files","path":"find_world_writable_files.sh","last_modified":0,"description":"","engine":"sh","snippet":"#!/bin/sh\nif [ `find / -perm -o+w | wc -l`  == \"0\" ]; then echo \"No world writable files were found in this image\"; exit 0 ; else echo \"World writable files were found in this image\"; exit 1; fi\n\n"}],"scap_files":null,"scope":{"expression":"v1 || v2 || v3","variables":[{"attribute":"aqua.registry","value":"*"},{"attribute":"aqua.label","value":"*"},{"attribute":"container.image","value":"*"}]},"registries":null,"labels":null,"images":null,"cves_black_list":null,"packages_black_list":null,"packages_white_list":[{"format":"","name":"microenforcer","epoch":"","version":"all","version_range":"Equal To","release":"","arch":"","license":""}],"allowed_images":null,"trusted_base_images":null,"selected":true}'

   ## Create New Image Runtime Profile Policy

   curl -u administrator:Hitvan123! -X POST -H "Content-Type:application/json" http://hec-aqua001:8080/api/v1/securityprofiles -d '{"allow_executables":[],"allow_root":true,"allow_root_executables":[],"allow_users":[],"block_executables":[],"block_inbound_connections":false,"block_mounts":false,"block_outbound_connections":false,"block_root":true,"cpu_quota":{"unit":"%","value":0},"description":"HEC Container Platform audit only default image runtime profile","drop_capabilities":[],"encrypt_all_envs":true,"encrypt_env_vars":null,"enforce":false,"exceptional_readonly_files":[],"exec_lockdown":true,"image_lockdown":false,"max_processes":0,"memory_limit":{"unit":"MB","value":0},"name":"Baseline_Image_Runtime_Audit","netmode":true,"no_new_privileges":true,"pidmode":true,"prevent_privileged":false,"privileged":true,"readonly_files":[],"readonly_root":true,"restricted_volumes":[],"seccomp_profile":"","separate_executables":false,"static_binaries_protection":false,"use_host_user":false,"usermode":true,"utsmode":true,"version":"1.0","volumes":[]}'

   ## Modify Container Firewall Default Policy

   curl -u administrator:Hitvan123! -X PUT -H "Content-Type:application/json" http://hec-aqua001:8080/api/v1/networkpolicies/default -d '{"name":"default","version":"1.0","description":" HEC Network Firewall Default Policy","block_icmp_ping":false,"inbound_networks":[{"allow":true,"resource":"0.0.0.0/0","port_range":"0-65535","resource_type":"anywhere"}],"outbound_networks":[{"allow":true,"resource":"0.0.0.0/0","port_range":"0-65535","resource_type":"anywhere"}]}'

  ## Modify Threat Mitigation Policy

  curl -u administrator:Hitvan123! -X PUT -H "Content-Type:application/json" http://hec-aqua001:8080/api/v1/threat_mitigation -d '{"default_security_profile":"Baseline_Image_Runtime_Audit","enable_fork_guard":true,"fork_guard_process_limit":100,"enable_ip_reputation":true,"enable_port_scan_protection":true,"block_nw_unlink_cont":true}'
EOF
}

cleanupbootstrap
rebuild
fixdns
dcosinstall
aquainstall
createagents
addpolicyonaqua
unset SCRIPT
unset SCRIPTPATH
unset DOCKERUSERNAME
unset DOCKERPWD
unset aquaserver_name
unset aquaserver_internal_ip
unset aquaserver_external_ip
unset bootstrap_name
unset bootstrap_internal_ip
unset bootstrap_external_ip
unset private_key_name
unset SCRIPT
unset SCRIPTPATH

####  Boneyard for interesting commands:

# openstack server create --image mes-nodeTemplate74-dockerCE --flavor m1.xlarge --security-group mes01.internal --key-name heccp_demo2 --availability-zone nova --wait private-8

